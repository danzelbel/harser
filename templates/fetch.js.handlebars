import fetch from "node-fetch";
import "chai/register-should";

class Foo {
  baseUrl = "{{get-baseurl request.url}}";

  async {{lower-first (get-action request.url)}}() {
    const url = new URL(`${baseUrl}{{get-path request.url}}`);
{{#if request.queryString}}
    const params = [];
  {{#each request.queryString}}
    params["{{name}}"] = {{{js-escape-string value}}};
  {{/each}}
    url.search = new URLSearchParams(params);
{{/if}}
{{#if request.headers}}
    const headers = new Headers();
  {{#each request.headers}}
    headers.append("{{name}}", {{{js-escape-string value}}});
  {{/each}}
{{/if}}
{{#if request.postData}}
  {{#if (contains request.postData.mimeType "multipart/form-data")}}
    const body = new FormData();
    {{#each request.postData.params}}
      {{#if (equal value "(binary)")}}
    body.append("{{name}}", fileInput.files[{{@index}}], "{{get-postdata-filename .. this}}");
      {{else}}
    body.append("{{name}}", {{{js-escape-string value}}});
      {{/if}}
    {{/each}}
  {{/if}}
  {{#if (contains request.postData.mimeType "application/json")}}
		{{#if (is-null (parse-json request.postData.text))}}
    const body = null;
		{{else}}
    	{{#with (parse-json request.postData.text) as | body |}}
      	{{#if (typeof body "object")}}
    const b = {{#if (is-array body)}}[]{{else}}{}{{/if}};
        	{{#each (flatten "b" body)}}
						{{#if (is-null this)}}
    {{@key}} = null;
						{{else}}
							{{#if (is-array this)}}
    {{@key}} = [];
							{{else}}
								{{#if (typeof this "object")}}
    {{@key}} = {};
								{{else}}
    {{@key}} = {{#if (typeof this "string")}}{{{js-escape-string this}}}{{else}}{{this}}{{/if}};
								{{/if}}
							{{/if}}
						{{/if}}
        	{{/each}}
    const body = JSON.stringify(b);
      	{{else}}
    const body = {{#if (typeof body "string")}}{{{js-escape-string body}}}{{else}}{{body}}{{/if}};
      	{{/if}}
    	{{/with}}
		{{/if}}
  {{/if}}
  {{!-- ADD OTHER MIMETYPES HERE WHEN NEEDED --}}
{{/if}}
    const res = await fetch(url, { method: "{{request.method}}"{{#if request.headers}}, headers: headers{{/if}}{{#if request.postData}}, body: body{{/if}} });
    if (res.status !== {{response.status}}) {
      throw new Error(await res.text());
    }
{{#if (contains response.content.mimeType "application/json")}}
  {{#if response.content.text}}
    return await res.json();
  {{/if}}
{{!-- ADD OTHER MIMETYPES HERE WHEN NEEDED --}}
{{else}}
    return res.text();
{{/if}}
  }

  async test() {
{{#if response.content.text}}
  {{#if (contains response.content.mimeType "application/json")}}
		{{#if (is-null (parse-json response.content.text))}}
    const data = await {{lower-first (get-action request.url)}}();
    data.should.equal(null);
		{{else}}
    	{{#with (parse-json response.content.text) as | data |}}
    {{#if data}}const data = {{/if}}await {{lower-first (get-action ../request.url)}}();
      	{{#if (typeof data "object")}}
        	{{#each (flatten "data" data)}}
						{{#if (is-null this)}}
    {{@key}}.should.equal(null);
						{{else}}
							{{#if (is-array this)}}
    {{@key}}.length.should.equal({{get-length this}});
							{{else}}
								{{#unless (typeof this "object")}}
    {{@key}}.should.equal({{#if (typeof this "string")}}{{{js-escape-string this}}}{{else}}{{this}}{{/if}});
								{{/unless}}
							{{/if}}
						{{/if}}
        	{{/each}}
      	{{else}}
    data.should.equal({{#if (typeof data "string")}}{{{js-escape-string data}}}{{else}}{{data}}{{/if}});
      	{{/if}}
    	{{/with}}
		{{/if}}
  {{/if}}
{{!-- ADD OTHER MIMETYPES HERE WHEN NEEDED --}}
{{else}}
    await {{lower-first (get-action request.url)}}();
{{/if}}
  }
}